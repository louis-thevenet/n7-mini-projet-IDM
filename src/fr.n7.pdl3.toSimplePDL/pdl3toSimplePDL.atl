-- @path XPDL=/fr.n7.pdl3/model/generated/PDL3.ecore
-- @path SPDL=/fr.n7.simplePDL/SimplePDL.ecore


-- ... l'en-tête est volontairement omis
-- Note : XPDL = méta-modèle issu de Xtext
--        SPDL = méta-modèle SimplePDL
module pdl1ToSimplePDL;
create OUT : SPDL from IN : XPDL;

-- Ce helper n'a pas de contexte. Il est défini au niveau du module.
helper def: convertLinkType(x : XPDL!WorkSequenceKind) : SPDL!WorkSequenceType =
    if x = #s2s then #startToStart
    else if x = #s2f then #startToFinish
    else if x = #f2s then #finishToStart
    else #finishToFinish
    endif endif endif; -- pas de SinonSi en ATL

rule XProc2SProc {
    from xp : XPDL!Process
    to   sp : SPDL!Process(
        name <- xp.name,
	-- Ajouter les enfants, sinon les autres éléments créés seront orphelins !
        processElements <- xp.processElements)
}

rule XWD2SWD {
    from xwd : XPDL!WorkDefinition
    to   swd : SPDL!WorkDefinition(name <- xwd.name)
}

rule XWS2SWS {
    from xws : XPDL!WorkSequence
    to   sws : SPDL!WorkSequence(
            linkType <- thisModule.convertLinkType(xws.linkType), -- Appel à notre helper
            predecessor <- xws.linkToPredecessor, -- Conversion/appel de règle implicite
            successor <- xws.linkToSucessor
        )
}

rule XR2SR {
	from xr : XPDL!Resource
	to sr : SPDL!Resource(
		name <- xr.name,
		total <- xr.total
	)
}

rule XRR2SRR {
	from xru : XPDL!ResourceUsage
	to sru : SPDL!ResourceUsage(
		resource <- xru.resource,
		linkToWorkDefinition <- xru.workDefinition,
		need <- xru.needed
	)
}

