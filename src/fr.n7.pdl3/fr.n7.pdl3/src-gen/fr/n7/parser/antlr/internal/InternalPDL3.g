/*
 * generated by Xtext 2.32.0
 */
grammar InternalPDL3;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fr.n7.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.n7.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.n7.services.PDL3GrammarAccess;

}

@parser::members {

 	private PDL3GrammarAccess grammarAccess;

    public InternalPDL3Parser(TokenStream input, PDL3GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Process";
   	}

   	@Override
   	protected PDL3GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProcess
entryRuleProcess returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcessRule()); }
	iv_ruleProcess=ruleProcess
	{ $current=$iv_ruleProcess.current; }
	EOF;

// Rule Process
ruleProcess returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='process'
		{
			newLeafNode(otherlv_0, grammarAccess.getProcessAccess().getProcessKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getProcessAccess().getColonKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getProcessAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProcessRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='resources'
		{
			newLeafNode(otherlv_3, grammarAccess.getProcessAccess().getResourcesKeyword_3());
		}
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getProcessAccess().getColonKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProcessAccess().getProcessElementsResourcesParserRuleCall_5_0());
				}
				lv_processElements_5_0=ruleResources
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcessRule());
					}
					add(
						$current,
						"processElements",
						lv_processElements_5_0,
						"fr.n7.PDL3.Resources");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='workdefinitions'
		{
			newLeafNode(otherlv_6, grammarAccess.getProcessAccess().getWorkdefinitionsKeyword_6());
		}
		otherlv_7=':'
		{
			newLeafNode(otherlv_7, grammarAccess.getProcessAccess().getColonKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProcessAccess().getProcessElementsWorkDefinitionsParserRuleCall_8_0());
				}
				lv_processElements_8_0=ruleWorkDefinitions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcessRule());
					}
					add(
						$current,
						"processElements",
						lv_processElements_8_0,
						"fr.n7.PDL3.WorkDefinitions");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_9='resourceusages'
		{
			newLeafNode(otherlv_9, grammarAccess.getProcessAccess().getResourceusagesKeyword_9());
		}
		otherlv_10=':'
		{
			newLeafNode(otherlv_10, grammarAccess.getProcessAccess().getColonKeyword_10());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProcessAccess().getProcessElementsResourceUsagesParserRuleCall_11_0());
				}
				lv_processElements_11_0=ruleResourceUsages
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcessRule());
					}
					add(
						$current,
						"processElements",
						lv_processElements_11_0,
						"fr.n7.PDL3.ResourceUsages");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_12='worksequences'
		{
			newLeafNode(otherlv_12, grammarAccess.getProcessAccess().getWorksequencesKeyword_12());
		}
		otherlv_13=':'
		{
			newLeafNode(otherlv_13, grammarAccess.getProcessAccess().getColonKeyword_13());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProcessAccess().getProcessElementsWorkSequencesParserRuleCall_14_0());
				}
				lv_processElements_14_0=ruleWorkSequences
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcessRule());
					}
					add(
						$current,
						"processElements",
						lv_processElements_14_0,
						"fr.n7.PDL3.WorkSequences");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleResourceUsages
entryRuleResourceUsages returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getResourceUsagesRule()); }
	iv_ruleResourceUsages=ruleResourceUsages
	{ $current=$iv_ruleResourceUsages.current; }
	EOF;

// Rule ResourceUsages
ruleResourceUsages returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getResourceUsagesAccess().getResourceUsageParserRuleCall_0());
		}
		this_ResourceUsage_0=ruleResourceUsage
		{
			$current = $this_ResourceUsage_0.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_1=';'
		{
			newLeafNode(otherlv_1, grammarAccess.getResourceUsagesAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleResourceUsage
entryRuleResourceUsage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getResourceUsageRule()); }
	iv_ruleResourceUsage=ruleResourceUsage
	{ $current=$iv_ruleResourceUsage.current; }
	EOF;

// Rule ResourceUsage
ruleResourceUsage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getResourceUsageRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getResourceUsageAccess().getWorkDefinitionWorkDefinitionCrossReference_0_0());
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getResourceUsageAccess().getColonKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getResourceUsageRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getResourceUsageAccess().getResourceResourceCrossReference_2_0());
				}
			)
		)
		otherlv_3='='
		{
			newLeafNode(otherlv_3, grammarAccess.getResourceUsageAccess().getEqualsSignKeyword_3());
		}
		(
			(
				lv_needed_4_0=RULE_INT
				{
					newLeafNode(lv_needed_4_0, grammarAccess.getResourceUsageAccess().getNeededINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getResourceUsageRule());
					}
					setWithLastConsumed(
						$current,
						"needed",
						lv_needed_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleResources
entryRuleResources returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getResourcesRule()); }
	iv_ruleResources=ruleResources
	{ $current=$iv_ruleResources.current; }
	EOF;

// Rule Resources
ruleResources returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getResourcesAccess().getResourceParserRuleCall_0());
		}
		this_Resource_0=ruleResource
		{
			$current = $this_Resource_0.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_1=';'
		{
			newLeafNode(otherlv_1, grammarAccess.getResourcesAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleResource
entryRuleResource returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getResourceRule()); }
	iv_ruleResource=ruleResource
	{ $current=$iv_ruleResource.current; }
	EOF;

// Rule Resource
ruleResource returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getResourceAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getResourceRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getResourceAccess().getColonKeyword_1());
		}
		(
			(
				lv_total_2_0=RULE_INT
				{
					newLeafNode(lv_total_2_0, grammarAccess.getResourceAccess().getTotalINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getResourceRule());
					}
					setWithLastConsumed(
						$current,
						"total",
						lv_total_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleWorkDefinitions
entryRuleWorkDefinitions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWorkDefinitionsRule()); }
	iv_ruleWorkDefinitions=ruleWorkDefinitions
	{ $current=$iv_ruleWorkDefinitions.current; }
	EOF;

// Rule WorkDefinitions
ruleWorkDefinitions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getWorkDefinitionsAccess().getWorkDefinitionParserRuleCall_0());
		}
		this_WorkDefinition_0=ruleWorkDefinition
		{
			$current = $this_WorkDefinition_0.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_1=';'
		{
			newLeafNode(otherlv_1, grammarAccess.getWorkDefinitionsAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleWorkDefinition
entryRuleWorkDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWorkDefinitionRule()); }
	iv_ruleWorkDefinition=ruleWorkDefinition
	{ $current=$iv_ruleWorkDefinition.current; }
	EOF;

// Rule WorkDefinition
ruleWorkDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getWorkDefinitionAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getWorkDefinitionRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleWorkSequences
entryRuleWorkSequences returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWorkSequencesRule()); }
	iv_ruleWorkSequences=ruleWorkSequences
	{ $current=$iv_ruleWorkSequences.current; }
	EOF;

// Rule WorkSequences
ruleWorkSequences returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getWorkSequencesAccess().getWorkSequenceParserRuleCall_0());
		}
		this_WorkSequence_0=ruleWorkSequence
		{
			$current = $this_WorkSequence_0.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_1=';'
		{
			newLeafNode(otherlv_1, grammarAccess.getWorkSequencesAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleWorkSequence
entryRuleWorkSequence returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWorkSequenceRule()); }
	iv_ruleWorkSequence=ruleWorkSequence
	{ $current=$iv_ruleWorkSequence.current; }
	EOF;

// Rule WorkSequence
ruleWorkSequence returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWorkSequenceRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getWorkSequenceAccess().getLinkToPredecessorWorkDefinitionCrossReference_0_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getWorkSequenceAccess().getLinkTypeWorkSequenceKindEnumRuleCall_1_0());
				}
				lv_linkType_1_0=ruleWorkSequenceKind
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWorkSequenceRule());
					}
					set(
						$current,
						"linkType",
						lv_linkType_1_0,
						"fr.n7.PDL3.WorkSequenceKind");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWorkSequenceRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getWorkSequenceAccess().getLinkToSucessorWorkDefinitionCrossReference_2_0());
				}
			)
		)
	)
;

// Rule WorkSequenceKind
ruleWorkSequenceKind returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='f2s'
			{
				$current = grammarAccess.getWorkSequenceKindAccess().getFinishToStartEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getWorkSequenceKindAccess().getFinishToStartEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='f2f'
			{
				$current = grammarAccess.getWorkSequenceKindAccess().getFinishToFinishEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getWorkSequenceKindAccess().getFinishToFinishEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='s2s'
			{
				$current = grammarAccess.getWorkSequenceKindAccess().getStartToStartEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getWorkSequenceKindAccess().getStartToStartEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='s2f'
			{
				$current = grammarAccess.getWorkSequenceKindAccess().getStartToFinishEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getWorkSequenceKindAccess().getStartToFinishEnumLiteralDeclaration_3());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
