/** generated by Xtext 2.32.0 */
package fr.n7.pDL3.impl;

import fr.n7.pDL3.PDL3Factory;
import fr.n7.pDL3.PDL3Package;
import fr.n7.pDL3.Resource;
import fr.n7.pDL3.ResourceUsage;
import fr.n7.pDL3.ResourceUsages;
import fr.n7.pDL3.Resources;
import fr.n7.pDL3.WorkDefinition;
import fr.n7.pDL3.WorkDefinitions;
import fr.n7.pDL3.WorkSequence;
import fr.n7.pDL3.WorkSequenceKind;
import fr.n7.pDL3.WorkSequences;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.impl.EFactoryImpl;
import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 *
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 *
 * @generated
 */
public class PDL3FactoryImpl extends EFactoryImpl implements PDL3Factory {
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   *
   * @generated
   */
  public static PDL3Factory init() {
    try {
      PDL3Factory thePDL3Factory =
          (PDL3Factory) EPackage.Registry.INSTANCE.getEFactory(PDL3Package.eNS_URI);
      if (thePDL3Factory != null) {
        return thePDL3Factory;
      }
    } catch (Exception exception) {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new PDL3FactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   *
   * @generated
   */
  public PDL3FactoryImpl() {
    super();
  }

  /**
   *
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   *
   * @generated
   */
  @Override
  public EObject create(EClass eClass) {
    switch (eClass.getClassifierID()) {
      case PDL3Package.PROCESS:
        return createProcess();
      case PDL3Package.RESOURCE_USAGES:
        return createResourceUsages();
      case PDL3Package.RESOURCE_USAGE:
        return createResourceUsage();
      case PDL3Package.RESOURCES:
        return createResources();
      case PDL3Package.RESOURCE:
        return createResource();
      case PDL3Package.WORK_DEFINITIONS:
        return createWorkDefinitions();
      case PDL3Package.WORK_DEFINITION:
        return createWorkDefinition();
      case PDL3Package.WORK_SEQUENCES:
        return createWorkSequences();
      case PDL3Package.WORK_SEQUENCE:
        return createWorkSequence();
      default:
        throw new IllegalArgumentException(
            "The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   *
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   *
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue) {
    switch (eDataType.getClassifierID()) {
      case PDL3Package.WORK_SEQUENCE_KIND:
        return createWorkSequenceKindFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException(
            "The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   *
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   *
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue) {
    switch (eDataType.getClassifierID()) {
      case PDL3Package.WORK_SEQUENCE_KIND:
        return convertWorkSequenceKindToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException(
            "The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   *
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   *
   * @generated
   */
  @Override
  public fr.n7.pDL3.Process createProcess() {
    ProcessImpl process = new ProcessImpl();
    return process;
  }

  /**
   *
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   *
   * @generated
   */
  @Override
  public ResourceUsages createResourceUsages() {
    ResourceUsagesImpl resourceUsages = new ResourceUsagesImpl();
    return resourceUsages;
  }

  /**
   *
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   *
   * @generated
   */
  @Override
  public ResourceUsage createResourceUsage() {
    ResourceUsageImpl resourceUsage = new ResourceUsageImpl();
    return resourceUsage;
  }

  /**
   *
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   *
   * @generated
   */
  @Override
  public Resources createResources() {
    ResourcesImpl resources = new ResourcesImpl();
    return resources;
  }

  /**
   *
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   *
   * @generated
   */
  @Override
  public Resource createResource() {
    ResourceImpl resource = new ResourceImpl();
    return resource;
  }

  /**
   *
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   *
   * @generated
   */
  @Override
  public WorkDefinitions createWorkDefinitions() {
    WorkDefinitionsImpl workDefinitions = new WorkDefinitionsImpl();
    return workDefinitions;
  }

  /**
   *
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   *
   * @generated
   */
  @Override
  public WorkDefinition createWorkDefinition() {
    WorkDefinitionImpl workDefinition = new WorkDefinitionImpl();
    return workDefinition;
  }

  /**
   *
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   *
   * @generated
   */
  @Override
  public WorkSequences createWorkSequences() {
    WorkSequencesImpl workSequences = new WorkSequencesImpl();
    return workSequences;
  }

  /**
   *
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   *
   * @generated
   */
  @Override
  public WorkSequence createWorkSequence() {
    WorkSequenceImpl workSequence = new WorkSequenceImpl();
    return workSequence;
  }

  /**
   *
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   *
   * @generated
   */
  public WorkSequenceKind createWorkSequenceKindFromString(
      EDataType eDataType, String initialValue) {
    WorkSequenceKind result = WorkSequenceKind.get(initialValue);
    if (result == null)
      throw new IllegalArgumentException(
          "The value '"
              + initialValue
              + "' is not a valid enumerator of '"
              + eDataType.getName()
              + "'");
    return result;
  }

  /**
   *
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   *
   * @generated
   */
  public String convertWorkSequenceKindToString(EDataType eDataType, Object instanceValue) {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   *
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   *
   * @generated
   */
  @Override
  public PDL3Package getPDL3Package() {
    return (PDL3Package) getEPackage();
  }

  /**
   *
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   *
   * @deprecated
   * @generated
   */
  @Deprecated
  public static PDL3Package getPackage() {
    return PDL3Package.eINSTANCE;
  }
} // PDL3FactoryImpl
